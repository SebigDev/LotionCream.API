// <auto-generated />
using System;
using LotionCream.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LotionCream.API.Migrations
{
    [DbContext(typeof(LotionCreamDBContext))]
    [Migration("20180814214739_colorAdded")]
    partial class colorAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LotionCream.API.Models.Categories.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LotionCream.API.Models.Color.Color", b =>
                {
                    b.Property<int>("ColorID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorName");

                    b.HasKey("ColorID");

                    b.ToTable("Color");
                });

            modelBuilder.Entity("LotionCream.API.Models.Comments.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CommentAuthorID");

                    b.Property<string>("CommentBody");

                    b.Property<byte[]>("CommentPicture");

                    b.Property<long>("PostID");

                    b.HasKey("CommentID");

                    b.HasIndex("CommentAuthorID");

                    b.HasIndex("PostID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LotionCream.API.Models.Posts.Post", b =>
                {
                    b.Property<long>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID");

                    b.Property<long>("PostAuthorID");

                    b.Property<string>("PostBody");

                    b.Property<byte[]>("PostPhoto");

                    b.Property<string>("PostTitle");

                    b.HasKey("PostID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PostAuthorID");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("LotionCream.API.Models.Products.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID");

                    b.Property<long?>("CreatedByUserID");

                    b.Property<long>("CreatorID");

                    b.Property<string>("ProductName");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("CreatedByUserID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("LotionCream.API.Models.Replies.Reply", b =>
                {
                    b.Property<int>("ReplyID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentID");

                    b.Property<long>("ReplyAuthorID");

                    b.Property<string>("ReplyBody");

                    b.Property<int>("ShareTypeID");

                    b.HasKey("ReplyID");

                    b.HasIndex("CommentID");

                    b.HasIndex("ReplyAuthorID");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("LotionCream.API.Models.UserManagement.User", b =>
                {
                    b.Property<long>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<DateTime>("DataOfBirth");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int>("SkinColor");

                    b.Property<string>("Username");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LotionCream.API.Models.Comments.Comment", b =>
                {
                    b.HasOne("LotionCream.API.Models.UserManagement.User", "CommentAuthor")
                        .WithMany()
                        .HasForeignKey("CommentAuthorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LotionCream.API.Models.Posts.Post", "CommentPost")
                        .WithMany("PostComments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LotionCream.API.Models.Posts.Post", b =>
                {
                    b.HasOne("LotionCream.API.Models.Categories.Category", "PostCategory")
                        .WithMany("CategoryPosts")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LotionCream.API.Models.UserManagement.User", "PostAuthor")
                        .WithMany()
                        .HasForeignKey("PostAuthorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LotionCream.API.Models.Products.Product", b =>
                {
                    b.HasOne("LotionCream.API.Models.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LotionCream.API.Models.UserManagement.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserID");
                });

            modelBuilder.Entity("LotionCream.API.Models.Replies.Reply", b =>
                {
                    b.HasOne("LotionCream.API.Models.Comments.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LotionCream.API.Models.UserManagement.User", "ReplyAuthor")
                        .WithMany()
                        .HasForeignKey("ReplyAuthorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
